# libadic - Professional Project Structure

## Root Level Files
- README.md - Main project documentation
- LICENSE - MIT license
- CHANGELOG.md - Version history
- CONTRIBUTING.md - Contribution guidelines
- SECURITY.md - Security policy
- setup.py - Python package setup
- pyproject.toml - Python project configuration
- CMakeLists.txt - CMake build configuration
- Dockerfile - Container definition
- docker-compose.yml - Container orchestration

## Core Directories

### `/include/libadic/` - Public C++ Headers
- All mathematical interfaces and core classes

### `/src/` - C++ Implementation
- `base/` - Core arithmetic (GMP wrapper, modular)
- `fields/` - Number fields (Zp, Qp, cyclotomic)
- `functions/` - Special functions (gamma, log, L-functions)

### `/tests/` - Test Suites
- `*.cpp` - C++ unit tests
- `python/` - Python binding tests and validation scripts

### `/python/` - Python Bindings
- `src/` - pybind11 binding code
- `libadic/` - Python module
- `tests/` - Python-specific tests
- `examples/` - Python usage examples

### `/docs/` - Documentation
- API_REFERENCE.md - Complete API with examples
- USER_GUIDE.md - Tutorials and walkthroughs
- MATHEMATICAL_REFERENCE.md - Mathematical background
- `validation/` - Validation and benchmark suites

### `/examples/` - Example Programs
- C++ examples (interactive_demo.cpp, etc.)
- Python examples (Reid-Li validation, character exploration)

### `/scripts/` - Build and Utility Scripts
- build.sh, run_all_tests.sh
- generate_docs.py - Documentation generator

### `/cmake/` - CMake Modules
- Project-specific CMake configuration

### `/extern/` - External Dependencies
- pybind11 - Python binding library

## Professional Standards Met
✅ Clear separation of concerns
✅ Logical directory hierarchy
✅ All loose files organized
✅ Comprehensive documentation
✅ Test organization by language/purpose
✅ Standard naming conventions
✅ Proper LICENSE and contributing files